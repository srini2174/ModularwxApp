# ============================================================================
# Copyright (c) 2011-2012 University of Pennsylvania
# Copyright (c) 2013-2016 Andreas Schuh
# All rights reserved.
#
# See COPYING file for license information or visit
# https://cmake-basis.github.io/download.html#license
# ============================================================================

##############################################################################
# @file  Settings.cmake
# @brief Non-default project settings.
#
# This file is included by basis_project_impl() after it looked for the
# required and optional dependencies and the CMake variables related to the
# project directory structure were defined (see BASISDirectories.cmake file
# in @c PROJECT_BINARY_DIR, where BASIS is here the name of the project).
# It is also included before the BasisSettings.cmake file.
#
# In particular, build options should be added in this file using CMake's
# <a href="http://www.cmake.org/cmake/help/cmake-2-8-docs.html#command:option">
# option()</a> command. Further, any common settings related to using a found
# dependency can be set here if the basis_use_package() command was enable
# to import the required configuration of a particular external package.
#
# @ingroup BasisSettings
##############################################################################

# ============================================================================
# directories
# ============================================================================

# FindwxWidgets
# -------------
#
# Find a wxWidgets (a.k.a., wxWindows) installation.
#
# This module finds if wxWidgets is installed and selects a default
# configuration to use.  wxWidgets is a modular library.  To specify the
# modules that you will use, you need to name them as components to the
# package:
#
# find_package(wxWidgets COMPONENTS core base ...)
#
# There are two search branches: a windows style and a unix style.  For
# windows, the following variables are searched for and set to defaults
# in case of multiple choices.  Change them if the defaults are not
# desired (i.e., these are the only variables you should change to
# select a configuration):
#
# ::
#
#   wxWidgets_ROOT_DIR      - Base wxWidgets directory
#                             (e.g., C:/wxWidgets-2.6.3).
#   wxWidgets_LIB_DIR       - Path to wxWidgets libraries
#                             (e.g., C:/wxWidgets-2.6.3/lib/vc_lib).
#   wxWidgets_CONFIGURATION - Configuration to use
#                             (e.g., msw, mswd, mswu, mswunivud, etc.)
#   wxWidgets_EXCLUDE_COMMON_LIBRARIES
#                           - Set to TRUE to exclude linking of
#                             commonly required libs (e.g., png tiff
#                             jpeg zlib regex expat).
#
#
#
# For unix style it uses the wx-config utility.  You can select between
# debug/release, unicode/ansi, universal/non-universal, and
# static/shared in the QtDialog or ccmake interfaces by turning ON/OFF
# the following variables:
#
# ::
#
#   wxWidgets_USE_DEBUG
#   wxWidgets_USE_UNICODE
#   wxWidgets_USE_UNIVERSAL
#   wxWidgets_USE_STATIC
#
#
#
# There is also a wxWidgets_CONFIG_OPTIONS variable for all other
# options that need to be passed to the wx-config utility.  For example,
# to use the base toolkit found in the /usr/local path, set the variable
# (before calling the FIND_PACKAGE command) as such:
#
# ::
#
#   set(wxWidgets_CONFIG_OPTIONS --toolkit=base --prefix=/usr)
#
#
#
# The following are set after the configuration is done for both windows
# and unix style:
#
# ::
#
#   wxWidgets_FOUND            - Set to TRUE if wxWidgets was found.
#   wxWidgets_INCLUDE_DIRS     - Include directories for WIN32
#                                i.e., where to find "wx/wx.h" and
#                                "wx/setup.h"; possibly empty for unices.
#   wxWidgets_LIBRARIES        - Path to the wxWidgets libraries.
#   wxWidgets_LIBRARY_DIRS     - compile time link dirs, useful for
#                                rpath on UNIX. Typically an empty string
#                                in WIN32 environment.
#   wxWidgets_DEFINITIONS      - Contains defines required to compile/link
#                                against WX, e.g. WXUSINGDLL
#   wxWidgets_DEFINITIONS_DEBUG- Contains defines required to compile/link
#                                against WX debug builds, e.g. __WXDEBUG__
#   wxWidgets_CXX_FLAGS        - Include dirs and compiler flags for
#                                unices, empty on WIN32. Essentially
#                                "`wx-config --cxxflags`".
#   wxWidgets_USE_FILE         - Convenience include file.
#
#
#
# Sample usage:
#
# ::
#
#    # Note that for MinGW users the order of libs is important!
#    find_package(wxWidgets COMPONENTS net gl core base)
#    if(wxWidgets_FOUND)
#      include(${wxWidgets_USE_FILE})
#      # and for each of your dependent executable/library targets:
#      target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})
#    endif()
#
#
#
# If wxWidgets is required (i.e., not an optional part):
#
# ::
#
#    find_package(wxWidgets REQUIRED net gl core base)
#    include(${wxWidgets_USE_FILE})
#    # and for each of your dependent executable/library targets:
#    target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})

#
# FIXME: check this and provide a correct sample usage...
#        Remember to connect back to the upper text.
# Sample usage with monolithic wx build:
#
#   find_package(wxWidgets COMPONENTS mono)
#   ...

# NOTES
#
# This module has been tested on the WIN32 platform with wxWidgets
# 2.6.2, 2.6.3, and 2.5.3. However, it has been designed to
# easily extend support to all possible builds, e.g., static/shared,
# debug/release, unicode, universal, multilib/monolithic, etc..
#
# If you want to use the module and your build type is not supported
# out-of-the-box, please contact me to exchange information on how
# your system is setup and I'll try to add support for it.


# check for availability of wxWidgets library
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    message("The selected compiler is gcc")
    set (wxWidgets_ROOT_DIR 		"C:/wxWidgets/gcc71_x64")
    set (wxWidgets_LIB_DIR  		"${wxWidgets_ROOT_DIR}/gcc71_x64/lib")
    set (wxWidgets_CONFIGURATION 	"gcc_dll/mswud")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set (wxWidgets_ROOT_DIR 		"C:/wxWidgets")
    set (wxWidgets_LIB_DIR  		"${wxWidgets_ROOT_DIR}/vc141_x64/lib")
    set (wxWidgets_CONFIGURATION 	"vc141_x64_dll/mswud")
endif()


# Here we specify the list of wxWidgets libs which we will use in our project
set(wxWidgets_USE_LIBS base core adv aui net gl xml propgrid html)

# Here we specify that we need DLL version of wxWidgets libs and dynamic CRT
# This is a MUST for applications with plugins. Both app and DLL plugin MUST
# use the same instance of wxWidgets and the same event loop.
#set(BUILD_SHARED_LIBS 1)

# Find wxWidgets library on current PC
# You should have %WXWIN%  environment variable which should point to the
# directory where wxWidgets source code is placed.
# wxWidgets libs MUST be compiled for both Debug and Release versions
find_package(wxWidgets COMPONENTS core base adv aui net gl xml propgrid html REQUIRED)


# This should be done only if it is windows, otherwise the individual compiler options needs to be added explicitly
if (wxWidgets_FOUND)

    add_definitions(-DwxUSE_UNICODE_MSLU)
    add_definitions(-DDEMO_PLUGIN_EXPORTS)

    if (WIN32)
    # check for availability of wxWidgets library
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
#         For some reason CMake generates wrong list of definitions.
#         Each item should start with /D but it does not.
#         We need to fix that manually
#        set(wxWidgets_DEFINITIONS_TEMP)
#        foreach(DEFINITION ${wxWidgets_DEFINITIONS})
#            if(NOT ${DEFINITION} MATCHES "-D.*")
#                set(DEFINITION "${DEFINITION}")
#            endif()
#            set(wxWidgets_DEFINITIONS_TEMP ${wxWidgets_DEFINITIONS_TEMP} ${DEFINITION})
#        endforeach(${DEFINITION})
#        set(wxWidgets_DEFINITIONS ${wxWidgets_DEFINITIONS_TEMP})
        add_compile_options(-mthreads)
        add_compile_options(-Wno-ctor-dtor-privacy -pipe -fmessage-length=0)

    elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
        # For some reason CMake generates wrong list of definitions.
        # Each item should start with /D but it does not.
        # We need to fix that manually
        set(wxWidgets_DEFINITIONS_TEMP)
        foreach(DEFINITION ${wxWidgets_DEFINITIONS})
            if(NOT ${DEFINITION} MATCHES "/D.*")
                set(DEFINITION "/D${DEFINITION}")
            endif()
            set(wxWidgets_DEFINITIONS_TEMP ${wxWidgets_DEFINITIONS_TEMP} ${DEFINITION})
        endforeach(${DEFINITION})
        set(wxWidgets_DEFINITIONS ${wxWidgets_DEFINITIONS_TEMP})
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /wd4996")
    endif()
        add_definitions(-DHAVE_W32API_H)
        add_definitions(-D__WXMSW__)
        message ("The value of wxWidgets_DEFINITION is ${wxWidgets_DEFINITIONS}")
    endif(WIN32)

    # Since we are going to use wxWidgets in all subrojects,
    # it's OK to create the variable which will contain
    # common preprocessor definitions. This variable will be
    # used in subprojects.
#    set(PREPROCESSOR_DEFINITIONS ${PREPROCESSOR_DEFINITIONS};${wxWidgets_DEFINITIONS})
#    add_definitions(${PREPROCESSOR_DEFINITIONS})
    include( ${wxWidgets_USE_FILE} )

#    set(wxWidgets_LIBRARIES_TEMP)
#    foreach(DEFINITION ${wxWidgets_LIBRARIES})
#        if(NOT ${DEFINITION} MATCHES "-l.*")
#            set(DEFINITION "-l${DEFINITION}")
#        endif()
#        set(wxWidgets_LIBRARIES_TEMP ${wxWidgets_LIBRARIES_TEMP} ${DEFINITION})

#        get_filename_component(wxWidgets_LIBRARY_DIRS ${DEFINITION} DIRECTORY CACHE)
#    endforeach(${DEFINITION})

#    set (wxWidgets_LIBRARY_DIRS ${wxWidgets_LIBRARY_DIRS})
#    set (wxWidgets_LIBRARIES ${wxWidgets_LIBRARIES_TEMP})

endif (wxWidgets_FOUND)
